name: Release candidate

on:
  push:
    branches:
    - 'rc/**'

jobs:
  linux:

    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Create linux package
      run: |
          make debpkg
          mkdir linux-release-candidate
          cp linux/artifacts/*.deb linux-release-candidate/
          cp linux/artifacts/*.tar.gz linux-release-candidate/
    - uses: actions/upload-artifact@master
      with:
        name: linux-release-candidate
        path: linux-release-candidate

  windows:

    runs-on: windows-2019
    strategy:
      fail-fast: true
      matrix:
        versions:
          # - osarch: "windows-x86_64"
          #   arch: "x64"
          #   choco_opts: ""
          #   stack_opts: "-j1"
          #   stack_yaml_overrides: ""
          - osarch: "windows-i386"
            arch: "x86"
            choco_opts: "--x86 --version 2.1.3.20190715"
            stack_opts: "-j1 --flag hslua:lua_32bits"
            stack_yaml_overrides: "compiler: ghc-8.6.3\\ncompiler-check: match-exact"
            # we use stack 2.1.3 because 2.3.1 doesn't support i386
            # note that ghc 8.6.3 is the last one with an i386 binary

    steps:
    - uses: actions/checkout@v1
    - name: Install stack
      shell: cmd
      run: |
          choco install haskell-stack ${{ matrix.versions.choco_opts }}
    - name: Update stack.yaml if needed
      shell: cmd
      run: |
          echo -e "${{ matrix.versions.stack_yaml_overrides }}" >> stack.yaml
    - name: Install dependencies
      run: |
          stack update
          stack build ${{ matrix.versions.stack_opts }} --dependencies-only pandoc pandoc-citeproc
    - name: Create windows package
      shell: cmd
      run: |
          for /f %%a in ('powershell -Command "Get-Date -format yyyy-MM-dd"') do set THEDATE=%%a
          stack build  ${{ matrix.versions.stack_opts }} pandoc pandoc-citeproc
          for /f "tokens=1-2 delims= " %%a in ('stack exec pandoc -- --version') do (
            @set VERSION=%%b
            goto :next
            )
          :next
          if "%VERSION%" == "" (
            echo Error: could not determine version number.
            exit /b 1
          )
          echo Detected version %VERSION%
          @set WINDOWS=%CD%\windows
          @set RELEASE=%WINDOWS%\pandoc-%VERSION%
          mkdir %RELEASE%
          forfiles /P .\.stack-work\install /M pandoc*.exe /S /C "cmd /C echo @path && echo %%WINDOWS%% && copy @path %%RELEASE%%"
          stack exec pandoc -- -s --toc MANUAL.txt -o %RELEASE%\MANUAL.html
          stack exec pandoc -- -s COPYING.md -t rtf -o %RELEASE%\COPYING.rtf
          copy %RELEASE%\COPYING.rtf %WINDOWS%
          copy COPYRIGHT %RELEASE%\COPYRIGHT.txt
          cd windows
          echo Creating msi...
          dir
          @set WIXBIN="c:\Program Files (x86)\WiX Toolset v3.11\bin"
          @set WORKDIR=%CD%
          echo Running candle...
          %WIXBIN%\candle -arch ${{ matrix.versions.arch }} -dVERSION=%VERSION% -dBINPATH=%RELEASE% *.wxs -out wixobj\
          if %errorlevel% neq 0 exit /b %errorlevel%
          echo Running light...
          %WIXBIN%\light -sw1076 -ext WixUIExtension -ext WixUtilExtension -cultures:en-us -loc Pandoc-en-us.wxl -out %WORKDIR%\pandoc-%VERSION%-${{ matrix.versions.osarch }}-UNSIGNED.msi wixobj\*.wixobj
          7z a "pandoc-%VERSION%-${{ matrix.versions.osarch }}.zip" pandoc-%VERSION%
          cd ..
          mkdir windows-release-candidate
          copy windows\pandoc-%VERSION%-${{ matrix.versions.osarch }}-UNSIGNED.msi windows-release-candidate
          copy windows\pandoc-%VERSION%-${{ matrix.versions.osarch }}.zip windows-release-candidate
          copy windows\Makefile windows-release-candidate
    - uses: actions/upload-artifact@master
      with:
        name: windows-release-candidate
        path: windows-release-candidate

# We now build for macos on travis-ci.com

