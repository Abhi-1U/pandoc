Pandoc
  Meta { unMeta = fromList [] }
  [ Para
      [ Str "This file tests the Pandoc reader for Haddock."
      , SoftBreak
      , Str
          "We've borrowed examples from Haddock's documentation: "
      , Link
          ( "" , [] , [] )
          [ Str "http://www.haskell.org/haddock/doc/html/ch03s08.html"
          ]
          ( "http://www.haskell.org/haddock/doc/html/ch03s08.html"
          , "http://www.haskell.org/haddock/doc/html/ch03s08.html"
          )
      , Str "."
      ]
  , Para
      [ Str
          "The following characters have special meanings in Haddock, /, ', `, \", @, <, so they must be escaped."
      ]
  , Para
      [ Str "* This is a paragraph, not a list item."
      , SoftBreak
      , Str "> This sentence is not code."
      , SoftBreak
      , Str ">>> This is not an example."
      ]
  , Para
      [ Str
          "The references \955, \955 and \955 all represent the lower-case letter lambda."
      ]
  , Para [ Str "This is a code block:" ]
  , CodeBlock
      ( "" , [] , [] )
      "map :: (a -> b) -> [a] -> [b]\nmap _ []     = []\nmap f (x:xs) = f x : map f xs"
  , Para [ Str "This is another code block:" ]
  , Para
      [ Code ( "" , [] , [] ) "f x = x + x."
      , LineBreak
      , Code ( "" , [] , [] ) "The @...@ code block "
      , Emph
          [ Code ( "" , [] , [] ) "interprets markup normally" ]
      , Code ( "" , [] , [] ) "."
      , Code ( "" , [ "haskell" , "module" ] , [] ) "Module.Foo"
      , Code ( "" , [] , [] ) ""
      , LineBreak
      , Code ( "" , [] , [] ) "\"Hello World\""
      ]
  , Para [ Str "Haddock supports REPL examples:" ]
  , Para
      [ Code ( "" , [ "prompt" ] , [] ) ">>>"
      , Str " "
      , Code ( "" , [ "haskell" , "expr" ] , [] ) "fib 10"
      , LineBreak
      , Code ( "" , [ "result" ] , [] ) "55"
      ]
  , Para
      [ Code ( "" , [ "prompt" ] , [] ) ">>>"
      , Str " "
      , Code
          ( "" , [ "haskell" , "expr" ] , [] )
          "putStrLn \"foo\\nbar\""
      , LineBreak
      , Code ( "" , [ "result" ] , [] ) "foo"
      , LineBreak
      , Code ( "" , [ "result" ] , [] ) "bar"
      ]
  , Para
      [ Str "That was "
      , Emph [ Str "really cool" ]
      , Str "!"
      , SoftBreak
      , Str "I had no idea "
      , Code ( "" , [] , [] ) "fib 10 = 55"
      , Str "."
      ]
  , Para
      [ Str "This module defines the type "
      , Code ( "" , [ "haskell" , "identifier" ] , [] ) "T"
      , Str "."
      , SoftBreak
      , Str "The identifier "
      , Code ( "" , [ "haskell" , "identifier" ] , [] ) "M.T"
      , Str " is not in scope"
      , SoftBreak
      , Str
          "I don't have to escape my apostrophes; great, isn't it?"
      , SoftBreak
      , Str "This is a reference to the "
      , Code ( "" , [ "haskell" , "module" ] , [] ) "Foo"
      , Str " module."
      ]
  , Para [ Str "This is a bulleted list:" ]
  , BulletList
      [ [ Para [ Str "first item" ] ]
      , [ Para [ Str "second item" ] ]
      ]
  , Para [ Str "This is an enumerated list:" ]
  , OrderedList
      ( 1 , DefaultStyle , DefaultDelim )
      [ [ Para [ Str "first item" ] ]
      , [ Para [ Str "second item" ] ]
      ]
  , Para [ Str "This is a definition list:" ]
  , DefinitionList
      [ ( [ Code ( "" , [] , [] ) "foo" ]
        , [ [ Para
                [ Str "The description of "
                , Code ( "" , [] , [] ) "foo"
                , Str "."
                ]
            ]
          ]
        )
      , ( [ Code ( "" , [] , [] ) "bar" ]
        , [ [ Para
                [ Str "The description of "
                , Code ( "" , [] , [] ) "bar"
                , Str "."
                ]
            ]
          ]
        )
      ]
  , Para
      [ Str "Here is a link: "
      , Link
          ( "" , [] , [] )
          [ Str "http://haskell.org" ]
          ( "http://haskell.org" , "http://haskell.org" )
      ]
  , Para
      [ Link
          ( "" , [] , [] )
          [ Str "Haskell" ]
          ( "http://haskell.org" , "http://haskell.org" )
      , Str " is a fun language!"
      ]
  , Para
      [ Link
          ( "" , [] , [] )
          [ Str "Click Here!" ]
          ( "http://example.com" , "http://example.com" )
      ]
  ]
